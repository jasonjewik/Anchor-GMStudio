<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
hSpeed = 0;
vSpeed = 0;
hSpeedFinal = 0;
vSpeedFinal = 0;
hSpeedFrac = .0;
vSpeedFrac = .0;
accl = 0.5;
frc = 0.5;
maxSpeed = 2;
attack = false;
image_speed = 0.2;
global.xFace = 0;
global.yFace = 0;
ranged = false;
rollVal = false;
dir = ""
dash = false
ammo = 10

//Debug [temp variables]
t = 0;

//Player States
enum pst {
    normal, 
    damage, 
    roll
}

state = pst.normal;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>-1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>projectile = instance_create(x,y,obj_projectile);
projectile.direction = point_direction(x,y,mouse_x,mouse_y);
projectile.image_angle = image_angle;
projectile.speed = 8;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State Engine
scr_getInput();
switch (state) {
    case pst.normal: {scr_normal(); break;}
    case pst.damage: {scr_damage(); break;}
    case pst.roll: {scr_roll(); break;}
}

//Collision with Enemy
if (!dash) {
    if (place_meeting(x, y, obj_enemy)) {
        enemyCon = instance_place(x, y, obj_enemy);
        state = pst.damage;
    }
    if (place_meeting(x, y, obj_eAttack)) {
        enemyCon = instance_place(x, y, obj_eAttack);
        state = pst.damage;
    }
}

//Item Pickup
item = instance_position(x, y, obj_item)   
if (instance_position(x, y, item)) scr_itemPick(item);

//Face Values
if (hSpeed == 0 &amp;&amp; vSpeed == 0) {
    if (mouse_x &gt; x) global.xFace = 0;
    if (mouse_x &lt; x) global.xFace = 1;
    if (mouse_y &gt; y) global.yFace = 0;
    if (mouse_y &lt; y) global.yFace = 1;
} /*else {
    if (key_right) global.xFace = 0;
    if (key_left) global.xFace = 1;
    if (key_up) global.yFace = 1;
    if (key_down) global.yFace = 0;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (state) {
    case pst.roll: {
        state = pst.normal;
        image_index = 0;
        break;
    } 
    case pst.damage: {
        state = pst.normal;
        image_index = 0;
        break;
    }
    default: break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug [press tab to scroll through inv]
draw_self();

draw_text(x, y, state);

/*
draw_text(x, y, global.inventory[0, t])

if (keyboard_check_pressed(vk_tab)) {
    if (t == array_length_2d(global.inventory, 0) - 1) t = 0;
    else t++;
}

draw_text(x + 10, y, alarm[0]);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Anim Handling
if (global.xFace = 0) image_xscale = -1;
if (global.xFace = 1) image_xscale = 1;
image_speed = 1;

switch (state) {
    case pst.normal: {
        if (hSpeed == 0 &amp;&amp; vSpeed == 0) {
            if (global.yFace = 1) sprite_index = spr_player_idle_back;
            else if (global.yFace = 0) sprite_index = spr_player_idle;
        } else if (abs(hSpeed) &gt; 0) {
            image_speed = 0.5;
            image_xscale = sign(hSpeed)
            sprite_index = spr_player_walk;
        }
        if (ranged) {
            if (point_direction(x, y, mouse_x, mouse_y) &gt;= 180 &amp;&amp; point_direction(x, y, mouse_x, mouse_y) &lt;= 270) {
                draw_sprite_ext(spr_pistol, image_index, x, y, image_xscale, -image_yscale, point_direction(x, y, mouse_x, mouse_y), image_blend, image_alpha);
            } else if (point_direction(x, y, mouse_x, mouse_y) &gt; 270 &amp;&amp; point_direction(x, y, mouse_x, mouse_y) &lt;= 360) {
                draw_sprite_ext(spr_pistol, image_index, x, y, -image_xscale, image_yscale, point_direction(x, y, mouse_x, mouse_y), image_blend, image_alpha);
            }
        }
        break;
    }
    case pst.roll: {
        if (global.yFace = 1) sprite_index = spr_player_dash
        if (global.yFace = 0) sprite_index = spr_player_dash;
        if (dir == "v") draw_sprite_ext(spr_player_dash_sil, image_index, x + -sign(hSpeed) * 10 , y, image_xscale, image_yscale, image_angle, image_blend, 0.5);
        else if (dir == "h") draw_sprite_ext(spr_player_dash_sil, image_index, x, y + -sign(vSpeed) * 10, image_xscale, image_yscale, image_angle, image_blend, 0.5);
        else if (dir == "hv") draw_sprite_ext(spr_player_dash_sil, image_index, x + -sign(hSpeed) * 10, y + -sign(vSpeed) * 10, image_xscale, image_yscale, image_angle, image_blend, 0.5);
        break;      
    }
    case pst.damage: {
        sprite_index = spr_player_dmg;
        image_xscale = -sign(enemyCon.x - x); 
        break;
    }
    default: break;
}

scr_light();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
