<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>-1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>reload = false;
global.autoTargeting = false;
global.target = noone;
initTrigger = false;
targetX = mouse_x;
targetY = mouse_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>reload = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_getInput();
x = mouse_x;
y = mouse_y;

if (instance_exists(obj_playerTest)) {
    if (obj_playerTest.ammo &lt; 10) {
        //Auto Reload at 0 or manually reload at above 0
        if (obj_playerTest.ammo == 0 || key_reload) {
            { do {
                obj_playerTest.ammo++;
            } until 
                obj_playerTest.ammo = 10;  
            }
            reload = true;
            alarm_set(0, 60);
        }
    }
    
    if (global.timeSlow &amp;&amp; !initTrigger) {
        if (mouse_left) global.target = instance_position(x, y, obj_enemy);
        if (global.target != noone) global.autoTargeting = true;
    }
}

//Should the scope stop
if (instance_exists(obj_playerTest)) {
    collision = collision_line(obj_playerTest.x, obj_playerTest.y, mouse_x, mouse_y, obj_enemy, false, true)
    if (collision == noone) {
        targetX = mouse_x;
        targetY = mouse_y;
        obj_playerTest.xBounds = 99999;
        obj_playerTest.yBounds = 99999;
    } else {
        obj_playerTest.xBounds = collision.x - obj_playerTest.x;
        obj_playerTest.yBounds = collision.y - obj_playerTest.y;
    }
}

if (instance_exists(obj_playerTest)) {
    show_debug_message("(" + string(obj_playerTest.xBounds) + ", " + string(obj_playerTest.yBounds) + ")");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_getInput();

//Aiming Line
if (instance_exists(obj_playerTest) &amp;&amp; global.pState = st.range) {
    draw_set_color(c_white);
    
    if (lengthdir_x(x - obj_playerTest.x, point_direction(obj_playerTest.x, obj_playerTest.y, x, y)) &gt; obj_playerTest.xBounds) {
        targetX = mouse_x - (mouse_x - obj_playerTest.x - obj_playerTest.xBounds);
    } else targetX = mouse_x;
    if (lengthdir_y(y - obj_playerTest.y, point_direction(obj_playerTest.x, obj_playerTest.y, x, y)) &gt; obj_playerTest.yBounds) {
        targetY = mouse_y - (mouse_y - obj_playerTest.y - obj_playerTest.yBounds);
    } else targetY = mouse_y; 
    draw_line(obj_playerTest.x, obj_playerTest.y, targetX, targetY);
}



//Set the Cursor Sprite
if (!reload) {
    cursor_sprite = spr_cursor;

    if (instance_exists(obj_enemy)) {
        if (place_meeting(x, y, obj_enemy)) cursor_sprite = spr_cursorA;
    }
} else cursor_sprite = spr_cursorB; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
