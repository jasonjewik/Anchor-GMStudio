<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>class_shadowed</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

//Movement
hSpeed = 0;
hSpeedFrac = 0;
hSpeedFinal = 0;
vSpeed = 0;
vSpeedFrac = 0;
vSpeedFinal = 0;
maxSpeed = 3.5;
accl = 0.8;
frc = accl * 0.8;
dashSpeed = 20;
cooldown = false;

//Combat
maxHp = 100;
hp = maxHp;
hpRegen = 0;
maxStamina = 100;
stamina = maxStamina;
staminaRegen = 2;
dashCost = maxStamina/10;
max_timeEssence = 100;
timeEssence = max_timeEssence;
global.hudOpen = false;
invulnerable = false;

//Sprites
sprite_idle = player_default_idle;
sprite_idle_back = player_default_idle_back;
sprite_idle_left = player_default_idle_left;
sprite_idle_right = player_default_idle_right;
sprite_walk = player_default_walkingforward;
sprite_walk_back = player_default_walkingback;
sprite_walk_left = player_default_walkingleft;
sprite_walk_right = player_default_walkingright;
sprite_dash = player_default_dash;
sprite_die = player_default_die;
lastSprite = sprite_idle;

//State Machine
state_machine_init();
state_create("Idle", player_idle);
state_create("Run", player_run);
state_create("Dash", player_dash);
state_create("Damage", player_damage);
state_create("Talk", player_talk);
state_create("Melee", player_melee);
state_create("Range", player_range);
state_create("Die", player_die);
state_init("Idle");

persistent = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>-1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>-1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state_cleanup();

if (!global.pause) room_goto(rm_death);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = lastSprite;
state_switch_previous();
alarm_set(1, -1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (stamina &lt; maxStamina) {
    stamina += staminaRegen;
    alarm_set(0, room_speed/2);
} else if (stamina &gt;= maxStamina) stamina = maxStamina; 
cooldown = false;
invulnerable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.pause</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state_execute();

//Weapons
if (global.currentSelect != noone) with (global.currentSelect) isActive = true;

//Pulling up the HUD
if ((input_key_interact() || place_meeting(x, y, class_damage)) &amp;&amp; !global.chatOpen &amp;&amp; !global.canTalk &amp;&amp; !global.hudOpen) {
    healthBar = instance_create(view_xview + 2, view_yview - 6, gui_health_bar);
    healthBar.owner = class_player;
    healthBar.barMaxValue = hp;
    healthBar.barTotalValue = maxHp;
        
    staminaBar = instance_create(view_xview + 2, view_yview + 6, gui_stamina_bar);
    staminaBar.owner = class_player;
    staminaBar.barMaxValue = stamina;
    staminaBar.barTotalValue = maxStamina;

    timeBar = instance_create(view_xview + 2, view_yview + 18, gui_time_bar);
    timeBar.owner = class_player;
    timeBar.barMaxValue = timeEssence;
    timeBar.barTotalValue = max_timeEssence;
    
    global.hudOpen = true;
} else if (input_key_interact() &amp;&amp; !global.canTalk &amp;&amp; global.hudOpen) {    
    global.hudOpen = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation
//Determine the xFace
if (abs(mouse_x - x) &gt; 0) global.xFace = 1;
else global.xFace = -1;

//Determine the yFace
if (mouse_y - y &gt; 0) {
    global.yFace = 1;
    depth = 0;
}
else {
    global.yFace = -1;
    if (instance_exists(class_weapon)) depth = class_weapon.depth - 1;
}

image_speed = 0.2;

//Sprites
switch (state_name) {
    case "Idle":
        if (keyboard_check_released(ord("S"))) sprite_index = sprite_idle;
        else if (keyboard_check_released(ord("W"))) sprite_index = sprite_idle_back
        else if (keyboard_check_released(ord("D"))) sprite_index = sprite_idle_right;
        else if (keyboard_check_released(ord("A"))) sprite_index = sprite_idle_left;
        break;
    case "Dash":
        sprite_index = sprite_dash;
        break;
    case "Run":
        if (input_key_down()) sprite_index = sprite_walk;
        else if (input_key_up()) sprite_index = sprite_walk_back;
        else if (input_key_right()) sprite_index = sprite_walk_right;
        else if (input_key_left()) sprite_index = sprite_walk_left;
        break;
    case "Die":
        image_speed = 1;
        sprite_index = sprite_die;
        break;
    default: 
        sprite_index = sprite_idle;
        break;       

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index == sprite_die) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
