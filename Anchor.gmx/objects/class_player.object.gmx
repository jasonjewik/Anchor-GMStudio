<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>class_shadowed</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hSpeed = 0;
vSpeed = 0;
hSpeedFrac = 0;
vSpeedFrac = 0;
hSpeedFinal = 0;
vSpeedFinal = 0;
init_maxSpeed = 3.5;
maxSpeed = init_maxSpeed;
speedCap = init_maxSpeed * 10;
init_accl = 0.4;
accl = init_accl;
acclCap = init_accl * 10;
frc = accl * 0.8;
damage = false;
dir = noone;

name = "";
maxHp = 100;
hp = maxHp;
hpRegen = 0;
maxStamina = 100;
stamina = maxStamina;
staminaRegen = 2;
dashCost = maxStamina/4;
max_timeEssence = 100;
timeEssence = max_timeEssence;
global.hudOpen = false;

x1 = mouse_x;
y1 = mouse_y;
isAiming = false;
global.isAiming = isAiming;
global.isDashing = false;
global.timeSlow = false;
global.xFace = 0;
global.yFace = 0;
persistent = true;

sprite_idle = player_default_idle;
sprite_idle_back = player_default_idle_back;
sprite_idle_left = player_default_idle_left;
sprite_idle_right = player_default_idle_right;
sprite_walk = player_default_walkingforward;
sprite_walk_back = player_default_walkingback;
sprite_walk_left = player_default_walkingleft;
sprite_walk_right = player_default_walkingright;
sprite_dash = player_default_dash;



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>-1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>-1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.pause) room_goto(rm_death);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>maxSpeed = init_maxSpeed;
accl = init_accl;
dir = noone;
x1 = noone;
y1 = noone;
global.isDashing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (stamina &lt; maxStamina) {
    stamina += staminaRegen;
    alarm_set(0, room_speed/2);
} else if (stamina &gt;= maxStamina) stamina = maxStamina; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.pause</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
if (!global.isDashing &amp;&amp; !damage &amp;&amp; !global.chatOpen) {
    hMove = input_key_right() + -input_key_left();
    vMove = input_key_down() + -input_key_up();
}

hSpeed+=hMove*accl;
vSpeed+=vMove*accl;

hSpeed = clamp(hSpeed, -maxSpeed, maxSpeed);
vSpeed = clamp(vSpeed, -maxSpeed, maxSpeed);

frc = accl/2;

hSpeed = Friction(hSpeed, frc);
vSpeed = Friction(vSpeed, frc);

hSpeedFinal = hSpeed + hSpeedFrac;
hSpeedFrac = hSpeedFinal - floor(abs(hSpeedFinal)) * sign(hSpeedFinal);
hSpeedFinal -= hSpeedFrac;

vSpeedFinal = vSpeed + vSpeedFrac;
vSpeedFrac = vSpeedFinal - floor(abs(vSpeedFinal)) * sign(vSpeedFinal);
vSpeedFinal -= vSpeedFrac;

if (place_meeting(x + hSpeedFinal, y, class_solid)) {
    inc = sign(hSpeedFinal);
    while (!place_meeting(x + inc, y, class_solid)) x+=inc;
    hSpeed = 0;
    hSpeedFinal = 0;
}
x+=hSpeedFinal;

if (place_meeting(x, y + vSpeedFinal, class_solid)) {
    inc = sign(vSpeedFinal);
    while (!place_meeting(x, y + inc, class_solid)) y+=inc;
    vSpeed = 0;
    vSpeedFinal = 0;
}
y+=vSpeedFinal;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dash/Damage
if (!global.chatOpen &amp;&amp; ((input_key_dash() &amp;&amp; stamina &gt;= dashCost &amp;&amp; !global.isDashing) || damage)) {
    maxSpeed = speedCap;
    accl = acclCap;
    
    //Resets
    if (!damage) alarm_set(1, room_speed/2); 
    else if (damage) alarm_set(1, room_speed/4);
        
    /*if (!global.isDashing) {
        //Get mouse coordinates at initial cast
        tarX = mouse_x;
        tarY = mouse_y;
        
        //Set the cooldown
        alarm_set(0, room_speed * 2);
        
        global.isDashing = true;
    }*/
    
   
    //Old Code -- only works in 8 directions
    
    //Direction of Roll
    if (!global.isDashing) {
        if (!damage) {
            //Cooldown
            alarm_set(0, room_speed * 2);
            
            stamina -= dashCost;
            
            //Gets mouse position at time of activation so it doesn't change in real-time
            x1 = mouse_x;
            y1 = mouse_y;
        } 
                
        //Determine the direcion of the dash
        if (abs(x1 - x) &lt; 25) {
            dir = "h";
        } else if (abs(y1 - y) &lt; 25) {
            dir = "v";
        } else if (abs(x1 - x) - abs(y1 - y) &lt; 25) {
            dir = "hv";
        }
              
        //Ensures that this code only runs once
        global.isDashing = true;
    }
    
    //Switch block to make sure dash is only done in one direction
    switch (dir) {
        case "h": 
            if (y1 &gt; y) vMove = 1;
            else if (y1 &lt; y) vMove = -1;
            break;
        case "v": 
            if (x1 &lt; x) hMove = -1;
            else if (x1 &gt; x) hMove = 1;   
            break;
        case "hv": 
            hMove = sign(mouse_x - x);
            if (global.xFace == 1) {
                if (global.yFace == 1) vMove = -hMove; 
                else if (global.yFace == -1) vMove = hMove;
            }
            else if (global.xFace == -1) {
                if (global.yFace == 1) vMove = hMove;
                else if (global.yFace == -1) vMove = -hMove;
            }
            break;
        default: break;
    }
}

if (place_meeting(x + hSpeedFinal, y, class_wall)) {
    inc = sign(hSpeedFinal);
    if (place_meeting(x + inc, y, class_wall)) global.isDashing = false;
}
if (place_meeting(x, y + vSpeedFinal, class_wall)) {
    inc = sign(vSpeedFinal);
    if (place_meeting(x, y + inc, class_wall)) global.isDashing = false;
}

///Death
if (hp &lt;= 0) instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Weapons
if (global.currentSelect != noone) {
    with (global.currentSelect) isActive = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pulling up the HUD
if ((input_key_interact() || place_meeting(x, y, class_damage)) &amp;&amp; !global.chatOpen &amp;&amp; !global.canTalk &amp;&amp; !global.hudOpen) {
    healthBar = instance_create(view_xview + 2, view_yview - 6, gui_health_bar);
    healthBar.owner = class_player;
    healthBar.barMaxValue = hp;
    healthBar.barTotalValue = maxHp;
        
    staminaBar = instance_create(view_xview + 2, view_yview + 6, gui_stamina_bar);
    staminaBar.owner = class_player;
    staminaBar.barMaxValue = stamina;
    staminaBar.barTotalValue = maxStamina;

    timeBar = instance_create(view_xview + 2, view_yview + 18, gui_time_bar);
    timeBar.owner = class_player;
    timeBar.barMaxValue = timeEssence;
    timeBar.barTotalValue = max_timeEssence;
    
    global.hudOpen = true;
} else if (input_key_interact() &amp;&amp; !global.canTalk &amp;&amp; global.hudOpen) {    
    global.hudOpen = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation
//Determine the xFace
if (abs(mouse_x - x) &gt; 0) global.xFace = 1;
else global.xFace = -1;

//Determine the yFace
if (mouse_y - y &gt; 0) {
    global.yFace = 1;
    depth = 0;
}
else {
    global.yFace = -1;
    if (instance_exists(class_weapon)) depth = class_weapon.depth - 1;
}

/*if (global.chatOpen &amp;&amp; faceMe != noone) {
    if (faceMe.x - x &gt; 0) sprite_index = sprite_idle_right;
    else if (faceMe.x - x &lt; 0) sprite_index = sprite_idle_left;
}*/

image_speed = 0.2;

//Sprites
if (!global.chatOpen) {
    if (keyboard_check_released(ord("S"))) sprite_index = sprite_idle;
    else if (keyboard_check_released(ord("W"))) sprite_index = sprite_idle_back
    else if (keyboard_check_released(ord("D"))) sprite_index = sprite_idle_right;
    else if (keyboard_check_released(ord("A"))) sprite_index = sprite_idle_left;
    else {
        if (global.isDashing) sprite_index = sprite_dash;
        else {
            if (abs(hMove) &gt; 0 || abs(vMove) &gt; 0) {
                if (input_key_down()) sprite_index = sprite_walk;
                else if (input_key_up()) sprite_index = sprite_walk_back;
                else if (input_key_right()) sprite_index = sprite_walk_right;
                else if (input_key_left()) sprite_index = sprite_walk_left;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Test || Debug Code

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
